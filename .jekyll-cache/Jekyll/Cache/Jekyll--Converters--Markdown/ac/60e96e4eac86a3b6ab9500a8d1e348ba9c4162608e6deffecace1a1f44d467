I"иа<h2 id="Е╝·И╙▄Г╝─Д╩▀">Е╝·И╙▄Г╝─Д╩▀</h2>

<p>Д╫©Г■╗Д╦▀И²╒Д╦─Г╖█Ф┬√Е╓ Г╖█Д╪≤Е▄√Ф√╧ФЁ∙Е╝▄Ф┬░CUDAГ └Г÷╘И≤╣Е░▒И┤▐Д╧≤ФЁ∙$A\times b=C$,Е┘╤Д╦╜AФ≤╞$2^{14}\times 2^{14}$Г └Ф√╧И≤╣О╪▄$b$Д╦╨$2^{14}$Г╩╢Е░▒И┤▐Ц─┌Е│┤Х╝╬Г÷╘И≤╣$A$Г └Е┘┐Г╢═Д╦╨$a_{i,j}=i-0.1\times j+1$О╪▄Е░▒И┤▐$b$Г └Е┘┐Г╢═Д╦╨$b_i=\log\sqrt{i\times i-i+2}$Ц─┌</p>

<ul>
  <li>Д╫©Г■╗global memory</li>
  <li>Д╫©Г■╗Е░┬Е╧╤Х╝©Е╜≤</li>
  <li>Д╫©Г■╗constant memoryЕ╜≤Ф■╬Е░▒И┤▐</li>
  <li>Д╫©Г■╗shared memoryЕ╜≤Ф■╬Е░▒И┤▐Е▓▄Г÷╘И≤╣</li>
</ul>

<h2 id="Е╝·И╙▄Г▌╞Е╒┐">Е╝·И╙▄Г▌╞Е╒┐</h2>

<p>Е╝·И╙▄Е°╗Х─│Е╦┬Ф▐░Д╬⌡Г └Х╝║Г╝≈И⌡├Г╬╓Г └Д╦─Д╦╙Х┼┌Г┌╧Д╦┼Х©⌡Х║▄Ц─┌Е█∙Х┼┌Г┌╧Г └Ф≤╬Е█║И┘█Г╫╝Е╕┌Д╦▀О╪ </p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nvdia-smi
Mon Dec  2 08:38:49 2019
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 410.48                 Driver Version: 410.48                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|<span class="o">===============================</span>+<span class="o">======================</span>+<span class="o">======================</span>|
|   0  Tesla V100-PCIE...  On   | 00000000:3B:00.0 Off |                    0 |
| N/A   30C    P0    24W / 250W |      0MiB / 16130MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|<span class="o">=============================================================================</span>|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
</code></pre></div></div>

<h2 id="Е╝·И╙▄Е▌÷Г░├">Е╝·И╙▄Е▌÷Г░├</h2>

<p>Д╪≤Е▄√CUDAФ·╤Ф·└Д╦┼Г └Г╗▀Е╨▐О╪▄Д╦─Х┬╛Д╩▌Д╩╔Д╦▀Е┤═Д╦╙Ф√╧И²╒Х─┐Х≥▒О╪ </p>

<ul>
  <li>И─┴Ф▀╘Е╔╫Г └Е╧╤Х║▄Г╝≈ФЁ∙О╪▄Е▐▒Ф▌≤Ф⌡╢Е╓ Г └Ф∙╟Ф█╝Е╧╤Х║▄Ф─╖</li>
  <li>Д©²Ф▄│SMЕ╟╫Е▐╞Х┐╫Е©≥Г╒▄О╪▄Е╟╫И┤▐Е┬╘Г■╗Ф┴─Ф°┴Г └SMЕ▐┌Д╦▌Х╝║Г╝≈
    <ul>
      <li>Е┼═Е╓╖Ф∙╟Ф█╝И┤▐</li>
      <li>Е┤▐Е╟▐Г╨©Г╗▀Е²≈Е╓╖Е╟▐</li>
    </ul>
  </li>
  <li>Д╪≤Е▄√Е╜≤Е┌╗Е≥╗Г └Д╫©Г■╗
    <ul>
      <li>Е┘╗Е╠─Е╜≤Е┌╗Е≥╗Е░┬Е╧╤Х╝©И≈╝</li>
      <li>Д╫©Г■╗Ф⌡╢Е©╚Г └constant memoryФ┬√shared memory</li>
    </ul>
  </li>
</ul>

<h2 id="Е╝·И╙▄Х©┤Г╗▀">Е╝·И╙▄Х©┤Г╗▀</h2>

<p>Г■╠Д╨▌И┐╫Ф≤╞CUDAФ·╤Ф·└Д╦┼Г └Ф═╦Е┤╫Ф∙╟Е╞╧Ф╞■Ф─╖Х┐╫О╪▄Д╦▀И²╒Г └Х╝║Ф≈╤И┐╫Е▐╙Ф╣▀Д╨├Г■╗Д╨▌Ф═╦Е┤╫Ф∙╟Х╝║Г╝≈Г └Ф≈╤И≈╢О╪▄Х─▄Д╦█Е▄┘Е░╚Ф∙╟Ф█╝Ф▀╥Х╢²Г └И┐╗Е┬├О╪┬Е░╕Е┬≥Х©░Х║▄Ф≈╤И≈╢И┐╫Е°╗300msЕ╥╕Е▐ЁО╪▄Е÷╨Ф°╛Д╦┼И┐╫Ф≤╞Ф▀╥Х╢²Г └Ф≈╤И≈╢Х─▄Ф╡║Ф°┴Е▐┌Х─┐Д╩╥Е─╪Д╨├О╪┴Ц─┌Е╫⌠Г└╤О╪▄Г■╠Д╨▌Ф╡║Ф°┴Х╝║Е┘╔Ф▀╥Х╢²Г╜┴И╒└Е╓└Г░├Г └Ф≈╤И≈╢О╪▄И┌ёД╨⌡И°─Х╕│Х╝║Г╝≈Х╫╛Г╫╝Ф┬√Х─┘И╒└Х╞╩Е▐√Г └Г╝≈ФЁ∙Е°╗Х©≥И┤▄Д╪ Ф°┴Д╪≤Е┼©Д╦─Д╨⌡Ц─┌</p>

<h3 id="Д╫©Г■╗global-memory">Д╫©Г■╗global memory</h3>

<p>Х©≥Ф≤╞Ф°─Е÷╨Г║─Г └Г÷╘И≤╣Е░▒И┤▐Д╧≤ФЁ∙Ц─┌Х©≥И┤▄Е│┤Х╝╬Г╨©Г╗▀Е²≈И┐╫Ф≤╞Д╦─Г╩╢Г╩└Г╩┤Г └О╪▄Ф╞▐Д╦╙CUDAГ╨©Г╗▀Х╝║Г╝≈Г÷╘И≤╣Г └Д╦─Х║▄Д╦▌Е░▒И┤▐Д╧≤Г╖╞О╪▄Х©≥Ф═╥Е░└Г╨©Г╗▀Д╧▀И≈╢Ф╡║Ф°┴Х╞╩Е├≥Е├╡Г╙│О╪▄Д╦█И°─Х╕│Д╫©Г■╗Е▌÷Е╜░Ф⌠█Д╫°Ц─┌</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulGlobalMemory</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">A</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//Е╟├Г╩⌠Ф·°Е┘┬Е╜≤Е°╗Е╞└Е╜≤Е≥╗И┤▄О╪▄Е┤▐Е╟▒Е╞╧Е░▒И┤▐CГ └Х╝©Е╜≤</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">nCol</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Х©░Х║▄Ф≈╤И≈╢Д╦╨<code class="highlighter-rouge">3.861504ms</code>Ц─┌</p>

<h3 id="Д╫©Г■╗Е░┬Е╧╤Х╝©Е╜≤">Д╫©Г■╗Е░┬Е╧╤Х╝©Е╜≤</h3>

<p>Ф┴─Х╟⌠Е░┬Е╧╤Х╝©Е╜≤О╪▄Ф▄┤Г └Ф≤╞Г⌡╦И┌╩Г └Г╨©Г╗▀Х╝©И≈╝Ф╝╣Е╞╧И╫░Г └Е°╟Е²─Ц─┌Ф╞■Е╕┌Е°╗Д╧▀Е┴█Г └Д╩ёГ═│Д╦╜О╪▄<code class="highlighter-rouge">j == 0</code>Ф≈╤Г╨©Г╗▀0Х╝©И≈╝<code class="highlighter-rouge">A[0]</code>О╪▄Г╨©Г╗▀1Х╝©И≈╝<code class="highlighter-rouge">A[nCol]</code>О╪▄Г╨©Г╗▀2Х╝©И≈╝<code class="highlighter-rouge">A[2 * nCol]</code>Б─╕Е╝┐Д╩╛Е╧╤Д╦█Г⌡╦И┌╩О╪▄Е⌡═Ф╜╓Д╦█Ф╩║Х╤ЁЕ░┬Е╧╤Х╝©И≈╝Г └Х╕│Ф╠┌Ц─┌Е°╗Х©≥И┤▄Ф┬▒Д╩╛Ф┼┼Е▌÷Ф²╔Г └Г÷╘И≤╣$A$Ф╠┌Е┤╨Х╫╛Г╫╝$A^T$О╪▄Ф╜╓Ф≈╤<code class="highlighter-rouge">j == 0</code>Ф≈╤Г╨©Г╗▀0Х╝©И≈╝<code class="highlighter-rouge">At[0]</code>О╪▄Г╨©Г╗▀1Х╝©И≈╝<code class="highlighter-rouge">At[1]</code>О╪▄Г╨©Г╗▀2Х╝©И≈╝<code class="highlighter-rouge">At[2]</code>Б─╕Ф╜╓Ф≈╤Ф╩║Х╤ЁД╨├Е░┬Е╧╤Х╝©И≈╝Г └Х╕│Ф╠┌Ц─┌</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulGlobalMemoryAlign</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">At</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Х©░Х║▄Ф≈╤И≈╢Д╦╨<code class="highlighter-rouge">1.570816ms</code>О╪▄Ф─╖Х┐╫Ф▐░И╚≤Д╨├Е╟├Х©▒Д╦─Е─█О╪▄Е┘┘Е┬├Х╞╢Ф≤▌Д╨├Е░┬Е╧╤Х╝©Е╜≤Г └И┤█Х╕│Ф─╖Ц─┌</p>

<h3 id="Д╫©Г■╗constant-memoryЕ╜≤Ф■╬Е░▒И┤▐">Д╫©Г■╗constant memoryЕ╜≤Ф■╬Е░▒И┤▐</h3>

<p>ФЁ╗Ф└▐Е┬╟Е░▒И┤▐Е°╗Х╝║Г╝≈Х©┤Г╗▀Д╦╜Д╦█Д╪ Ф■╧Е▐≤О╪▄Д╦■Ф╞▐Д╦╙Г╨©Г╗▀Х╝©И≈╝Г⌡╦Е░▄Е°╟Е²─О╪▄Е⌡═Ф╜╓Х─┐Х≥▒Ф┼┼Е╝┐Ф■╬Е°╗constant memoryД╦╜Ц─┌</p>

<p>NVIDIAГ║╛Д╩╤Ф▐░Д╬⌡Д╨├64KBГ └Е╦╦И┤▐Е├┘Е╜≤О╪▄Е╧╤Д╦■Е╦╦И┤▐Е├┘Е╜≤И┤┤Г■╗Д╨├Д╦█Е░▄Д╨▌Ф═┤Е┤├Е┘╗Е╠─Е├┘Е╜≤Г └Е╓└Г░├Ф√╧Е╪▐Ц─┌Е°╗Х©≥И┤▄Ф┬▒Д╩╛Е╓╖Е╟▐Д╦╨$2^{14}$Г └Е█∙Г╡╬Е╨╕Ф╣╝Г┌╧Ф∙╟Е░▒И┤▐$b$Е╓╖Е╟▐Ф│╟Е╔╫Д╦╨64KBО╪▄Ф╜ёЕ╔╫Е▐╞Д╩╔Е╝▄Ф∙╢Д©²Е╜≤Ц─┌Е╕┌Ф·°Е░▒И┤▐Х╤┘Х©┤Д╨├constant memoryГ └64KBД╦┼И≥░О╪▄И┌ёЕ╟╠И°─Х╕│Е┬├Ф┴╧Х©⌡Х║▄О╪▄Е╓ Ф╛║Д╪═Х╬⌠Е▓▄Е░╞Е┼╗Е├┘Ф═╦Ц─┌</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lf</span> <span class="n">__constant__</span> <span class="n">d_Bc</span><span class="p">[(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)];</span> <span class="c1">//64KB</span>
<span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulConstantMemory</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">At</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">d_Bc</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Х©░Х║▄Ф≈╤И≈╢Д╦╨<code class="highlighter-rouge">1.536000ms</code>О╪▄Е°╗Д╦┼Д╦─Ф╜╔Г └Е÷╨Г║─Д╦┼Г∙╔Е╬╝Ф▐░И╚≤Ц─┌Д╫©Г■╗Е╦╦И┤▐Е├┘Е╜≤Е▐╞Д╩╔Ф▐░Е█┤Х©░Г╝≈Ф─╖Х┐╫Г └Е▌÷Е⌡═Д╦╩Х╕│Ф°┴Д╦╓Д╦╙О╪ </p>

<ol>
  <li>Е╞╧Е╦╦И┤▐Е├┘Е╜≤Г └Е█∙Ф╛║Х╞╩Ф⌠█Д╫°Е▐╞Д╩╔Е╧©Ф▓╜Е┬╟Е░▄Д╦╙Е█┼Г╨©Г╗▀Ф²÷Г └Е┘╤Д╩√$15$Д╦╙Г╨©Г╗▀О╪▄Х©≥Г╖█Ф√╧Е╪▐Д╨╖Г■÷Г └Е├┘Е╜≤Ф╣│И┤▐Е▐╙Ф≤╞Д╫©Г■╗Е┘╗Е╠─Е├┘Е╜≤Ф≈╤Г └$\frac{1}{16}$Ц─┌</li>
  <li>Г║╛Д╩╤Е╟├Д╦╩Е┼╗Ф┼┼Е╦╦И┤▐Ф∙╟Ф█╝Г╪⌠Е╜≤Е°╗GPUД╦┼Ц─┌Е°╗Г╛╛Д╦─Ф╛║Д╩▌Е╦╦И┤▐Е├┘Е╜≤Г └Ф÷░Д╦╙Е°╟Е²─Д╦┼Х╞╩Е▐√Е░▌О╪▄Е╫⌠Е┘╤Д╩√Е█┼Г╨©Г╗▀Ф²÷Х╞╥Ф╠┌Е░▄Д╦─Д╦╙Е°╟Е²─Ф≈╤О╪▄И┌ёД╧┬Е╟├Е▒╫Д╦╜Г╪⌠Е╜≤О╪▄Х©≥Е░▄Ф═╥Е┤▐Е╟▒Д╨├И╒²Е╓√Г └Е├┘Е╜≤Ф╣│И┤▐Ц─┌</li>
</ol>

<h3 id="Д╫©Г■╗shared-memoryЕ╜≤Ф■╬Е░▒И┤▐Е▓▄Г÷╘И≤╣">Д╫©Г■╗shared memoryЕ╜≤Ф■╬Е░▒И┤▐Е▓▄Г÷╘И≤╣</h3>

<p>Е╞╧Д╨▌blockЕ├┘Е├┘Е╜≤Ф²╔Х╞╢О╪▄Е░▒И┤▐И┐╫Ф≤╞Е┘╠Д╨╚Г └О╪▄Е⌡═Ф╜╓Ф┬▒Д╩╛Е▐╞Д╩╔Д╫©Г■╗Ф╞■constant memoryФ⌡╢Е©╚Г └shared memoryФ²╔Е╜≤Е┌╗О╪▄Ф╜╓Ф≈╤Г⌡╦Ф╞■Х╬┐Д╫©Г■╗Е╦╦И┤▐Е├┘Е╜≤О╪▄Ф┬▒Д╩╛Е┘█Ф▌┴Д╨├Е░▒И┤▐Ф╞■Х╬┐Е╓╖Г └Ф≈╤Е─≥Е╓ Ф╛║Ф∙╟Ф█╝Ф▀╥Х╢²Е▓▄Е░╞Е┼╗Ф═╦Е┤╫Ф∙╟Г └Е╪─И■─О╪▄Д╧÷Ф╡║Ф°┴Д╫©Г■╗Е┘╗Е╠─Е▐≤И┤▐О╪▄Е╒·Е┼═Д╨├Д╩ёГ═│Г └Е▐╞Ф┴╘Е╠∙Ф─╖Ц─┌Е╫⌠Г└╤О╪▄shared memoryФ⌡╢Е╟▐О╪▄Е⌡═Ф╜╓И°─Х╕│Е╞╧Е░▒И┤▐Х©⌡Х║▄Е┬├Е²≈Е╓└Г░├Ц─┌</p>

<p>Е▐╕Е╓√И°─Х╕│Ф⌡╢Ф╜ёГ └Д╦─Д╦╙И≈╝И╒≤Ф≤╞О╪▄Е╧╤Д╦█И°─Х╕│Д╫©Г■╗shared memoryЕ▌╩Е╜≤Г÷╘И≤╣О╪▄Е⌡═Д╦╨Е°╗Х©≥Д╦╙Г÷╘И≤╣Е░▒И┤▐Д╧≤Г └Х©┤Г╗▀Д╦╜О╪▄Ф╞▐Д╦╙Г÷╘И≤╣Е┘┐Г╢═Е▐╙Х╒╚Х╝©И≈╝Д╨├Д╦─Ф╛║Ц─┌Ф╜╓Е╓√О╪▄shared memoryГ └Е╓╖Е╟▐Д╧÷Е╧╤Д╦█Х╤ЁД╩╔Е╜≤Д╦▀Е╝▄Ф∙╢Г └Г÷╘И≤╣О╪┬Г■ Х┤ЁФ≤╞Е░▒И┤▐О╪┴Ц─┌</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulSharedMemory</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">At</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">extern</span> <span class="n">lf</span> <span class="n">__shared__</span> <span class="n">Bs</span><span class="p">[];</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">jBeg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">jEnd</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">nCol</span> <span class="o">?</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">:</span> <span class="n">nCol</span><span class="p">;</span>
		 <span class="n">jBeg</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span>
		 <span class="n">jBeg</span> <span class="o">+=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">jEnd</span> <span class="o">+=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">__syncthreads</span><span class="p">();</span> <span class="c1">//И≤╡Ф╜╒Ф°┴Г └Х©⌡Г╗▀Х©≤Е°╗Х╞╩Bs</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">jBeg</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">)</span>
			<span class="n">Bs</span><span class="p">[</span><span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">B</span><span class="p">[</span><span class="n">jBeg</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">];</span>
		<span class="n">__syncthreads</span><span class="p">();</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">jBeg</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">jEnd</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
				<span class="n">res</span> <span class="o">+=</span> <span class="n">At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">Bs</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">jBeg</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Х©░Х║▄Ф≈╤И≈╢Д╦╨<code class="highlighter-rouge">1.821696ms</code>О╪▄Е▐█Х─▄Ф°┴Д╦─Е╝ Г └Д╦▀И≥█Ц─┌Е┬├Ф·░Д╦─Д╦▀Е▌÷Е⌡═О╪ </p>

<ol>
  <li>Д╫©Г■╗Е╦╦И┤▐Е├┘Е╜≤Ф≈╤О╪▄Е╟├Е▌÷Ф²╔Г └Ф∙╟Ф█╝Ф▀╥Х╢²Е┬╟Е╦╦И┤▐Е├┘Е╜≤Г └Ф≈╤И≈╢Е╧╤Ф╡║Ф°┴Х╒╚Г╝≈Х©⌡Е▌╩О╪▄Х─▄Х©≥И┤▄Х╞╩Е├┘Е╜≤Г └Х©┤Г╗▀Ф≤╞Е°╗Ф═╦Е┤╫Ф∙╟Е├┘И┐╗Г └Ц─┌Ф┐ЁФ²╔Е╕┌Ф·°Е°╗Ф⌡╢Е╓╖Г └Г÷╘И≤╣Д╦┼Х©⌡Х║▄Х╝║Г╝≈О╪▄Д╫©Г■╗shared memoryЕ╨■Х╞╔Д╪ Ф°┴Ф⌡╢Е╔╫Г └Х║╗Г▌╟Ц─┌</li>
  <li>Х─│Е╦┬И⌡├Г╬╓Д╦┼Г └Ф≤╬Е█║Ф─╖Х┐╫Х©┤Д╨▌Е╪╨Ф┌█О╪┬Е°╗Д╩┼Е╧╢Е█│Д╦─Ф°┬SCХ╤┘Г╝≈Е╓╖Д╪ Е┬ Е▐▒Е╦┐Tesla V100SЕ┴█О╪▄Tesla V100Д╦─Г⌡╢И┐╫Ф≤╞Е╦┌И²╒Х┐╫Д╧╟Е┬╟Г └Ф°─Е╪╨Г╝≈Е┼⌡О╪┴О╪▄Е├┘Е╜≤Х╞╩Е├≥Ф─╖Х┐╫Ф╞■Д╩╔Е╬─Г └Ф≤╬Е█║И┐╫Х╕│Е╪╨Е╬┬Е╓ О╪▄Е⌡═Ф╜╓Е╞╧Ф°╛Ф²╔Е╥╡Г╩▐Е╬┬Е©╚Г └global memoryГ └Д╪≤Е▄√Ф∙┬Ф·°Ф╡║Ф°┴И┌ёД╧┬Ф≤▌Ф≤╬Д╨├О╪▄Х─▄Е╞╧Е╨■Г └Ф═╦Е┤╫Ф∙╟Е█╢Ф╞■Ф°╢Г╢═Г └Г╝≈ФЁ∙Ф⌡╢Е╓█Ф²┌О╪▄Д╦─Е╝ Г╗▀Е╨╕Д╦┼Е╒·Е┼═Д╨├Х©░Х║▄Г └Ф≈╤И≈╢Е╦╦Ф∙╟Ц─┌</li>
</ol>

<h3 id="matvecmulo12727"><code class="highlighter-rouge">MatVecMul.o12727</code></h3>

<p>Е┬├Е┬╚Ф≤╞Д╦┼И²╒Е⌡⌡Д╦╙Ф═╦Е┤╫Ф∙╟Г └Х©░Х║▄Ф≈╤И≈╢Ц─┌</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.861504ms
1.570816ms
1.536000ms
1.821696ms
</code></pre></div></div>

<p>Е▐╞Д╩╔Г°▀Е┬╟О╪▄Г■╠Д╨▌Г▌╟Е°╗Г └Г║╛Д╩╤Ф─╖Х┐╫Е╥╡Г╩▐Е╓╖Е╓╖Е╪╨Д╨▌Ф∙╟Е╧╢Е┴█О╪▄Е│ Е╜≤Е┌╗Е≥╗Г └Д╪≤Е▄√Ф∙┬Ф·°Е╥╡Г╩▐Ф╞■Х╬┐Е╟▐О╪┬Е╧╤Д╦█Ф≤╞Х╞╢Ф╡║Ф°┴О╪┴Ц─┌Е⌡═Ф╜╓О╪▄Е╞╧Х©≥Д╦╙И≈╝И╒≤Ф²╔Х╞╢О╪▄Ф°─Д╦╩Х╕│Г └Ф≤╞Х╕│И─┴Д╦─Д╦╙Д╪≤Г╖─Г └Е╧╤Х║▄Г╝≈ФЁ∙О╪▄Е╧╤Е╞╧Г╗▀Е╨▐Д╩ёГ═│Е│ Е╔╫Х╝©Е╜≤Е┬├Ф·░Е▓▄Д╪≤Е▄√Ц─┌</p>

<p>Е╫⌠Г└╤Д╧÷Д╦█Ф≤╞Х╞╢Е╜≤Е┌╗Е≥╗Г╩⌠Ф·└Е╟╠Д╦█Е├█И┤█Х╕│О╪▄Х©≤Ф≤╞Х╕│Е┘╥Д╫⌠И≈╝И╒≤Е┘╥Д╫⌠Е┬├Ф·░Ц─┌Д╦┼И²╒Е╬┬Е╓ Г╝≈ФЁ∙И┐╫Ф≤╞Х╕│Е╞╧Г÷╘И≤╣Ф┬√Х─┘Е░▒И┤▐Х©⌡Х║▄И╒└Е╓└Г░├Г └О╪▄Х─▄Е╧╤Ф╡║Ф°┴Ф┼┼Е╞╧Е╨■Г └Д╩ёД╩╥О╪┬Ф≈╤И≈╢Ц─│Е├┘Е╜≤Г╘╨И≈╢Ц─│Е▐╞Ф┴╘Е╠∙Ф─╖Г╜┴О╪┴Х╝║Е┘╔Е°╗Е├┘О╪▄Е╝·И≥┘Д╦┼Е°╗Х©░Г■╗Е┬╟Г■÷Д╨╖Г▌╞Е╒┐Г └Ф≈╤Е─≥Х©≥Д╨⌡Д╩█Г└╤Ф≤╞Е©┘И║╩Х╕│Х─┐Х≥▒Г └Ц─┌</p>

<h3 id="matvecmulpbs"><code class="highlighter-rouge">MatVecMul.pbs</code></h3>

<p>Х╟┐Е╨╕Х└ Ф°╛Ц─┌</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#PBS -N MatVecMul</span>
<span class="c">#PBS -l nodes=1:ppn=32:gpus=1</span>
<span class="c">#PBS -j oe</span>
<span class="c">#PBS -q gpu</span>
<span class="nb">source</span> /public/software/profile.d/cuda10.0.sh
<span class="nb">cd</span> <span class="nv">$PBS_O_WORKDIR</span>
nvcc MatVecMul.cu <span class="nt">-o</span> MatVecMul
./MatVecMul
</code></pre></div></div>

<h3 id="matvecmulcu"><code class="highlighter-rouge">MatVecMul.cu</code></h3>

<p>Е╝▄Ф∙╢Д╩ёГ═│Ц─┌</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;cuda_runtime.h&gt;
</span><span class="k">typedef</span> <span class="kt">float</span> <span class="n">lf</span><span class="p">;</span>
<span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulGlobalMemory</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">A</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//Е╟├Г╩⌠Ф·°Е┘┬Е╜≤Е°╗Е╞└Е╜≤Е≥╗И┤▄О╪▄Е┤▐Е╟▒Е╞╧Е░▒И┤▐CГ └Х╝©Е╜≤</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">nCol</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulGlobalMemoryAlign</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">At</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="n">lf</span> <span class="n">__constant__</span> <span class="n">d_Bc</span><span class="p">[(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)];</span> <span class="c1">//64KB</span>
<span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulConstantMemory</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">At</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">d_Bc</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">__global__</span> <span class="nf">MatVecMulSharedMemory</span><span class="p">(</span><span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">At</span><span class="p">,</span> <span class="k">const</span> <span class="n">lf</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="n">lf</span> <span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nRow</span><span class="p">,</span> <span class="k">const</span> <span class="kt">size_t</span> <span class="n">nCol</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">extern</span> <span class="n">lf</span> <span class="n">__shared__</span> <span class="n">Bs</span><span class="p">[];</span>
	<span class="k">const</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="n">lf</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">jBeg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">jEnd</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">nCol</span> <span class="o">?</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">:</span> <span class="n">nCol</span><span class="p">;</span>
		 <span class="n">jBeg</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span>
		 <span class="n">jBeg</span> <span class="o">+=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">jEnd</span> <span class="o">+=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">__syncthreads</span><span class="p">();</span> <span class="c1">//И≤╡Ф╜╒Ф°┴Г └Х©⌡Г╗▀Х©≤Е°╗Х╞╩Bs</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">jBeg</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">)</span>
			<span class="n">Bs</span><span class="p">[</span><span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">B</span><span class="p">[</span><span class="n">jBeg</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">];</span>
		<span class="n">__syncthreads</span><span class="p">();</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">jBeg</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">jEnd</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
				<span class="n">res</span> <span class="o">+=</span> <span class="n">At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">Bs</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">jBeg</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">)</span>
		<span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="kt">size_t</span>
		<span class="n">nRow</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">14</span><span class="p">,</span>
		<span class="n">nCol</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">14</span><span class="p">;</span>
	<span class="n">lf</span>
		<span class="o">*</span><span class="n">h_A</span> <span class="o">=</span> <span class="p">(</span><span class="n">lf</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">),</span>
		<span class="o">*</span><span class="n">h_At</span> <span class="o">=</span> <span class="p">(</span><span class="n">lf</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">),</span>
		<span class="o">*</span><span class="n">h_B</span> <span class="o">=</span> <span class="p">(</span><span class="n">lf</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">),</span>
		<span class="o">*</span><span class="n">h_C</span> <span class="o">=</span> <span class="p">(</span><span class="n">lf</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span><span class="p">),</span>
		<span class="o">*</span><span class="n">d_A</span><span class="p">,</span>
		<span class="o">*</span><span class="n">d_At</span><span class="p">,</span>
		<span class="o">*</span><span class="n">d_B</span><span class="p">,</span>
		<span class="o">*</span><span class="n">d_C</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
			<span class="n">h_A</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">nCol</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span> <span class="o">*</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nCol</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">h_B</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">log</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">j</span> <span class="o">*</span> <span class="n">j</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">));</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nRow</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
			<span class="n">h_At</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span> <span class="o">*</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">cudaMalloc</span><span class="p">((</span><span class="n">lf</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">d_A</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">);</span>
	<span class="n">cudaMalloc</span><span class="p">((</span><span class="n">lf</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">d_At</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">);</span>
	<span class="n">cudaMalloc</span><span class="p">((</span><span class="n">lf</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">d_B</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">);</span>
	<span class="n">cudaMalloc</span><span class="p">((</span><span class="n">lf</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">d_C</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span><span class="p">);</span>

	<span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_A</span><span class="p">,</span> <span class="n">h_A</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">,</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>
	<span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_At</span><span class="p">,</span> <span class="n">h_At</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nRow</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">,</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>
	<span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_B</span><span class="p">,</span> <span class="n">h_B</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">,</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>
	<span class="n">cudaMemcpyToSymbol</span><span class="p">(</span><span class="n">d_Bc</span><span class="p">,</span> <span class="n">h_B</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">nCol</span><span class="p">,</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cudaEvent_t</span> <span class="n">beg</span><span class="p">,</span> <span class="n">end</span><span class="p">;</span>
		<span class="n">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">beg</span><span class="p">);</span>
		<span class="n">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">end</span><span class="p">);</span>
		<span class="n">cudaEventRecord</span><span class="p">(</span><span class="n">beg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
		<span class="kt">size_t</span> <span class="n">blocks</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">,</span> <span class="n">grids</span> <span class="o">=</span> <span class="p">(</span><span class="n">nRow</span> <span class="o">+</span> <span class="n">blocks</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">blocks</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
			<span class="n">MatVecMulGlobalMemory</span><span class="o">&lt;&lt;&lt;</span><span class="n">grids</span><span class="p">,</span> <span class="n">blocks</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">d_A</span><span class="p">,</span> <span class="n">d_B</span><span class="p">,</span> <span class="n">d_C</span><span class="p">,</span> <span class="n">nRow</span><span class="p">,</span> <span class="n">nCol</span><span class="p">);</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
			<span class="n">MatVecMulGlobalMemoryAlign</span><span class="o">&lt;&lt;&lt;</span><span class="n">grids</span><span class="p">,</span> <span class="n">blocks</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">d_At</span><span class="p">,</span> <span class="n">d_B</span><span class="p">,</span> <span class="n">d_C</span><span class="p">,</span> <span class="n">nRow</span><span class="p">,</span> <span class="n">nCol</span><span class="p">);</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
			<span class="n">MatVecMulConstantMemory</span><span class="o">&lt;&lt;&lt;</span><span class="n">grids</span><span class="p">,</span> <span class="n">blocks</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">d_At</span><span class="p">,</span> <span class="n">d_B</span><span class="p">,</span> <span class="n">d_C</span><span class="p">,</span> <span class="n">nRow</span><span class="p">,</span> <span class="n">nCol</span><span class="p">);</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
			<span class="n">MatVecMulSharedMemory</span><span class="o">&lt;&lt;&lt;</span><span class="n">grids</span><span class="p">,</span> <span class="n">blocks</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">lf</span><span class="p">)</span> <span class="o">*</span> <span class="n">blocks</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">d_At</span><span class="p">,</span> <span class="n">d_B</span><span class="p">,</span> <span class="n">d_C</span><span class="p">,</span> <span class="n">nRow</span><span class="p">,</span> <span class="n">nCol</span><span class="p">);</span>
		<span class="n">cudaDeviceSynchronize</span><span class="p">();</span>
		<span class="n">cudaEventRecord</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
		<span class="n">cudaEventSynchronize</span><span class="p">(</span><span class="n">beg</span><span class="p">);</span>
		<span class="n">cudaEventSynchronize</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
		<span class="n">lf</span> <span class="n">elapsed_time</span><span class="p">;</span>
		<span class="n">cudaEventElapsedTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">elapsed_time</span><span class="p">,</span> <span class="n">beg</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"%fms</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">elapsed_time</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">cudaFree</span><span class="p">(</span><span class="n">d_A</span><span class="p">);</span>
	<span class="n">cudaFree</span><span class="p">(</span><span class="n">d_At</span><span class="p">);</span>
	<span class="n">cudaFree</span><span class="p">(</span><span class="n">d_B</span><span class="p">);</span>
	<span class="n">cudaFree</span><span class="p">(</span><span class="n">d_C</span><span class="p">);</span>
	<span class="n">free</span><span class="p">(</span><span class="n">h_A</span><span class="p">);</span>
	<span class="n">free</span><span class="p">(</span><span class="n">h_At</span><span class="p">);</span>
	<span class="n">free</span><span class="p">(</span><span class="n">h_B</span><span class="p">);</span>
	<span class="n">free</span><span class="p">(</span><span class="n">h_C</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
:ET